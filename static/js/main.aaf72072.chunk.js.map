{"version":3,"sources":["components/Navbar.js","App.js","index.js","components/TextForm.js","components/Alert.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","App","useState","setMode","document","body","style","backgroundColor","TextForm","ReactDOM","render","StrictMode","getElementById","text","setText","alert","setAlert","newAlert","message","value","onChange","event","target","rows","toLowerCase","toUpperCase","replace","trim","strBuf","Buffer","toString","base64Buf","err","navigator","clipboard","writeText","undefined","split","length","Alert","role","str","charAt","slice"],"mappings":"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","file":"static/js/main.aaf72072.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n// import { Link } from 'react-router-dom'\n\nconst Navbar = (props) => {\n  return (\n    <div>\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n        <div className=\"container-fluid\">\n          <a className=\"navbar-brand\" href=\"/\">\n            {props.title}\n          </a>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              <li className=\"nav-item\">\n                <a href=\"/\" className=\"nav-link\">\n                  Home\n                </a>\n              </li>\n              {/* <li className=\"nav-item\">\n                <Link to=\"/about\" className=\"nav-link\">\n                  About\n                </Link>\n              </li> */}\n            </ul>\n            <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark':'light'}`}>\n              <input\n                className=\"form-check-input\"\n                type=\"checkbox\"\n                id=\"mode\"\n                onClick={props.toggleMode}\n              />\n              <label className=\"form-check-label\" htmlFor=\"mode\">\n                Enable Dark Mode\n              </label>\n            </div>\n          </div>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nNavbar.propTypes = { title: PropTypes.string, mode: PropTypes.string };\n\nexport default Navbar;\n","import Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport { useState } from \"react\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport About from \"./components/About\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#343a40\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n    }\n  };\n\n  return (\n    <>\n      <div className=\"mb-3\">\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      </div>\n      \n        {/* <Route path=\"/about\">\n          <About mode={mode} />\n        </Route> */}\n        \n          <div className=\"container mb-3\">\n            <TextForm mode={mode} title=\"Enter Text\" />\n          </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","import React, { useState } from \"react\";\nimport Alert from \"./Alert\";\n\nconst TextForm = (props) => {\n  const [text, setText] = useState(\"\");\n  const [alert, setAlert] = useState(null);\n\n  const newAlert = (type, message) => {\n    setAlert({\n      type: type,\n      message: message,\n    });\n  };\n\n  const onTextChange = (event) => {\n    setText(event.target.value);\n  };\n\n  const lCase = () => setText(text.toLowerCase());\n\n  const uCase = () => setText(text.toUpperCase());\n\n  const b64 = () => {\n    if (text === \"\") {\n      newAlert(\"danger\", \"Empty Text\");\n      return;\n    }\n    var strBuf = new Buffer(text.toString());\n    setText(strBuf.toString(\"base64\"));\n  };\n\n  const decodeb64 = () => {\n    if (text === \"\") {\n      newAlert(\"danger\", \"Empty Text\");\n      return;\n    }\n    try {\n      var base64Buf = new Buffer(text.toString(), \"base64\");\n      setText(base64Buf.toString(\"ascii\"));\n    } catch (err) {\n      newAlert(\"danger\", err.toString());\n    }\n  };\n\n  const copy = () => {\n    if (text === \"\") {\n      newAlert(\"danger\", \"Empty Text\");\n      return;\n    }\n    navigator.clipboard.writeText(text);\n  };\n\n  const remXspace = () => {\n    if (text === \"\") {\n      newAlert(\"danger\", \"Empty Text\");\n      return;\n    }\n    setText(text.replace(/\\s+/g, \" \").trim());\n  }\n  \n  const clear = () => {\n      setText(\"\")\n  }\n\n  return (\n    <>\n      <div className={`mb-3 text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\n        <Alert alert={alert} />\n        <h3 className=\"text-center\">{props.title}</h3>\n        <textarea\n          className=\"form-control\"\n          value={text}\n          onChange={onTextChange}\n          id=\"textForm\"\n          rows=\"8\"\n        ></textarea>\n      </div>\n      <div className=\"mb-3\">\n        <button className=\"btn btn-primary mx-1\" onClick={lCase}>\n          Convert to Lower Case\n        </button>\n        <button className=\"btn btn-primary mx-2\" onClick={uCase}>\n          Convert to Upper Case\n        </button>\n        <button className=\"btn btn-primary mx-1\" onClick={remXspace}>\n          Remove Extra Spaces\n        </button>\n        <button className=\"btn btn-primary mx-1\" onClick={b64}>\n          Convert to Base-64\n        </button>\n        <button className=\"btn btn-primary mx-1\" onClick={decodeb64}>\n          Decode from Base-64\n        </button>\n        <button className=\"btn btn-primary mx-1\" onClick={copy}>\n          Copy Text\n        </button>\n        <button className=\"btn btn-danger mx-1\" onClick={clear}>\n          Clear\n        </button>\n      </div>\n      <div className={`mb-3 text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\n        <h3>Text Stats</h3>\n        <p>\n          {text !== undefined && text ? text.split(\" \").length : 0} words and{\" \"}\n          {text !== undefined ? text.length : 0} characters.\n        </p>\n      </div>\n      <div className={`mb-3 text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\n        <h3>Text Preview</h3>\n        <p>{text}</p>\n        <h4>Reading Time: {text.length / 300} minute(s)</h4>\n      </div>\n    </>\n  );\n};\n\nexport default TextForm;\n","import React from \"react\";\n\nconst capitalize = (str) => (str.charAt(0).toUpperCase() + str.slice(1));\n\nconst Alert = (props) => {\n  return (\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n      <strong>{capitalize(props.alert.type)}</strong> {props.alert.message}\n      <button\n        type=\"button\"\n        className=\"btn-close\"\n        data-bs-dismiss=\"alert\"\n        aria-label=\"Close\"\n      ></button>\n    </div>\n  );\n};\n\nexport default Alert;\n"],"sourceRoot":""}